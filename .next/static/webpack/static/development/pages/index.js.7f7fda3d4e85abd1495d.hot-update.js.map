{"version":3,"file":"static/webpack/static/development/pages/index.js.7f7fda3d4e85abd1495d.hot-update.js","sources":["webpack:///./bulma-style-components/utilities/bulma-functions.js","webpack:///./pages/index.js"],"sourcesContent":["const BulmaFunctions = () => (\n  <style jsx global>\n    {`\n      @function mergeColorMaps($bulma-colors, $custom-colors) {\n        // we return at least bulma hardcoded colors\n        $merged-colors: $bulma-colors; // we want a map as input\n        @if type-of($custom-colors) == \"map\" {\n          @each $name, $components in $custom-colors {\n            // color name should be a string and colors pair a list with at least one element\n            @if type-of($name) ==\n              \"string\" and\n              (\n                type-of($components) ==\n                  \"list\" or\n                  type-of($components) ==\n                  \"color\"\n              ) and\n              length($components) >=\n              1\n            {\n              $color-base: null;\n              // the param can either be a single color\n              // or a list of 2 colors\n              @if type-of($components) == \"color\" {\n                $color-base: $components;\n              } @else if type-of($components) == \"list\" {\n                $color-base: nth($components, 1);\n              }\n\n              $color-invert: null;\n              // is an inverted color provided in the list\n              @if length($components) > 1 {\n                $color-invert: nth($components, 2);\n              }\n\n              // we only want a color as base color\n              @if type-of($color-base) == \"color\" {\n                // if inverted color is not provided or is not a color we compute it\n                @if type-of($color-invert) != \"color\" {\n                  $color-invert: findColorInvert($color-base);\n                }\n                // we merge this colors elements as map with bulma colors (we can override them this way, no multiple definition for the same name)\n                $merged-colors: map_merge(\n                  $merged-colors,\n                  (\n                    $name: (\n                      $color-base,\n                      $color-invert\n                    )\n                  )\n                );\n              }\n            }\n          }\n        }\n        @return $merged-colors;\n      }\n\n      @function powerNumber($number, $exp) {\n        $value: 1;\n        @if $exp > 0 {\n          @for $i from 1 through $exp {\n            $value: $value * $number;\n          }\n        } @else if $exp < 0 {\n          @for $i from 1 through -$exp {\n            $value: $value / $number;\n          }\n        }\n        @return $value;\n      }\n\n      @function colorLuminance($color) {\n        $color-rgb: (\n          \"red\": red($color),\n          \"green\": green($color),\n          \"blue\": blue($color)\n        );\n        @each $name, $value in $color-rgb {\n          $adjusted: 0;\n          $value: $value / 255;\n          @if $value < 0.03928 {\n            $value: $value / 12.92;\n          } @else {\n            $value: ($value + 0.055) / 1.055;\n            $value: powerNumber($value, 2);\n          }\n          $color-rgb: map-merge(\n            $color-rgb,\n            (\n              $name: $value\n            )\n          );\n        }\n        @return (map-get($color-rgb, \"red\") * 0.2126) +\n          (map-get($color-rgb, \"green\") * 0.7152) +\n          (map-get($color-rgb, \"blue\") * 0.0722);\n      }\n      @function findColorInvert($color) {\n        @if (colorLuminance($color) > 0.55) {\n          @return rgba(#000, 0.7);\n        } @else {\n          @return #fff;\n        }\n      }\n    `}\n  </style>\n);\n\nexport default BulmaFunctions;\n","import InitalVariables from \"../bulma-style-components/utilities/inital-variables\";\nimport BulmaFunctions from \"../bulma-style-components/utilities/bulma-functions\";\n\nexport default () => (\n  <div className=\"hello\">\n    <button className=\"is-primary\">Hello World</button>\n    {/* TODO: Dump everything bulma right into this style component. I hate myself */}\n    <style jsx global>\n      {`\n        // Set your brand colors\n        $purple: #8a4d76;\n        $pink: #fa7c91;\n        $brown: #757763;\n        $beige-light: #d0d1cd;\n        $beige-lighter: #eff0eb;\n\n        // Update Bulma's Global variables\n        $family-sans-serif: \"Nunito\", sans-serif;\n        $grey-dark: $brown;\n        $grey-light: $beige-light;\n        $primary: $purple;\n        $link: $pink;\n        $widescreen-enabled: false;\n        $fullhd-enabled: false;\n\n        // Update some of Bulma's component variables\n\n        // Import only what you need from bulma.\n        // - We need everything - Schaffer\n        // @import \"../sass/utilities/_all.sass\";\n        // @import \"../node_modules/bulma/sass/base/_all.sass\";\n        // @import \"../node_modules/bulma/sass/elements/button.sass\";\n        // @import \"../node_modules/bulma/sass/elements/container.sass\";\n        // @import \"../node_modules/bulma/sass/elements/form.sass\";\n        // @import \"../node_modules/bulma/sass/elements/title.sass\";\n        // @import \"../node_modules/bulma/sass/components/navbar.sass\";\n        // @import \"../node_modules/bulma/sass/layout/hero.sass\";\n        // @import \"../node_modules/bulma/sass/layout/section.sass\";\n        // Copied from: https://bulma.io/documentation/customize/with-webpack/\n      `}\n    </style>\n    <InitalVariables />\n  </div>\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA4GA;;;;;;;;;;;;;;;;;;;;;;AC7GA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAqCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtCA;;;;A","sourceRoot":""}